# -*- coding: utf-8 -*-
"""Temp vs Load Final ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ygYdvLacRPvN_3dCquRAVSTUNKFRsPbU
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

data = pd.read_csv("/content/drive/MyDrive/Temp_Load_2018-2023csv.csv")

data.head()

# Remove rows with null values in the 'DATE' column
data = data.dropna(subset=['DATE'])

# Set up the figure and axes again
fig, ax1 = plt.subplots(figsize=(15, 6))

# Plot TMAX_AV_ALL on the primary y-axis using the "data" DataFrame
ax1.plot(data['DATE'], data['TMAX_AV_ALL'], color='red', label='Max. Average Temp')
ax1.set_xlabel('Date')
ax1.set_ylabel('Max. Average Temp (F)', color='red')
ax1.tick_params(axis='y', labelcolor='black')
ax1.set_title('Correlation Between Max Temp and ERCOT Load')

# Create a secondary y-axis for ERCOT
ax2 = ax1.twinx()
ax2.plot(data['DATE'], data['ERCOT'], color='black', label='ERCOT Load')
ax2.set_ylabel('Total ERCOT Load (MW)', color='black')
ax2.tick_params(axis='y', labelcolor='black')

# Improve the x-axis labels for better readability
plt.xticks(data['DATE'][::365], rotation=45)  # Take every 365th date for clarity

# Display the plot
plt.tight_layout()
plt.show()

# Set up the figure and axes
fig, ax1 = plt.subplots(figsize=(15, 6))

# Plot TMIN_AV_ALL on the primary y-axis using the "data" DataFrame
ax1.plot(data['DATE'], data['TMIN_AV_ALL'], color='blue', label='TMIN_AV_ALL')
ax1.set_xlabel('Date')
ax1.set_ylabel('Min. Average Temp (F)', color='black')
ax1.tick_params(axis='y', labelcolor='blue')
ax1.set_title('Correlation Between Min Temp and ERCOT Load')

# Create a secondary y-axis for ERCOT
ax2 = ax1.twinx()
ax2.plot(data['DATE'], data['ERCOT'], color='black', label='black')
ax2.set_ylabel('Total ERCOT Load (MW)', color='black')
ax2.tick_params(axis='y', labelcolor='black')

# Improve the x-axis labels for better readability
plt.xticks(data['DATE'][::365], rotation=45)  # Take every 365th date for clarity

# Display the plot
plt.tight_layout()
plt.show()

# Set up the figure and axes again
fig, ax1 = plt.subplots(figsize=(15, 6))

# Plot TMIN_AV_ALL and TMAX_AV_ALL on the primary y-axis using the "data" DataFrame
ax1.plot(data['DATE'], data['TMAX_AV_ALL'], color='red', label='Max Temperature', alpha=0.7)
ax1.plot(data['DATE'], data['TMIN_AV_ALL'], color='blue', label='Min Temperature', alpha=0.7)

ax1.set_xlabel('Date')
ax1.set_ylabel('Min and Max Avarage Temperature (Â°F)', color='black')
ax1.tick_params(axis='y', labelcolor='black')
ax1.set_title('Correlation Between Daily Avarage Temperature and ERCOT Total Load')
ax1.legend(loc='upper left')

# Create a secondary y-axis for ERCOT
ax2 = ax1.twinx()
ax2.plot(data['DATE'], data['ERCOT'], color='black', label='ERCOT')
ax2.set_ylabel('ERCOT Total Load (MW)', color='black')
ax2.tick_params(axis='y', labelcolor='black')
ax2.legend(loc='upper right')

# Improve the x-axis labels for better readability
plt.xticks(data['DATE'][::365], rotation=45)  # Take every 365th date for clarity

# Display the plot
plt.tight_layout()
plt.show()